// This file was generated by Querybinder <TODO: version>.
// Input files:
// - examples/users.sql

// use std::collections::hash_map::Entry::{Occupied, Vacant};
use std::collections::hash_map::HashMap;

use sqlite;
use sqlite::Statement;

pub type Result<T> = sqlite::Result<T>;

pub struct Connection<'a> {
    connection: &'a sqlite::Connection,
    statements: HashMap<u64, Statement<'a>>,
}

pub struct Transaction<'tx, 'a> {
    connection: &'a sqlite::Connection,
    statements: &'tx mut HashMap<u64, Statement<'a>>,
}

impl<'a> Connection<'a> {
    pub fn new(connection: &'a sqlite::Connection) -> Self {
        Self {
            connection,
            // TODO: We could do with_capacity here, because we know the number
            // of queries.
            statements: HashMap::new(),
        }
    }

    /// Begin a new transaction by executing the `BEGIN` statement.
    pub fn begin<'tx>(&'tx mut self) -> Result<Transaction<'tx, 'a>> {
        self.connection.execute("BEGIN;")?;
        let result = Transaction {
            connection: &self.connection,
            statements: &mut self.statements,
        };
        Ok(result)
    }
}

impl<'tx, 'a> Transaction<'tx, 'a> {
    /// Execute `COMMIT` statement.
    pub fn commit(self) -> Result<()> {
        self.connection.execute("COMMIT;")
    }

    /// Execute `ROLLBACK` statement.
    pub fn rollback(self) -> Result<()> {
        self.connection.execute("ROLLBACK;")
    }
}

pub fn setup_schema(tx: &mut Transaction) -> Result<()> {
    Ok(())
}

pub fn insert_user(tx: &mut Transaction, name: str, email: str) -> Result<i64> {
    Ok(())
}

pub fn insert_user_alt_return(tx: &mut Transaction, name: str, email: str) -> Result<User> {
    Ok(())
}

pub fn insert_user_alt_arg(tx: &mut Transaction, user: InsertUser) -> Result<i64> {
    Ok(())
}

pub fn select_user_by_id(tx: &mut Transaction, id: i64) -> Result<User> {
    Ok(())
}

pub fn select_all_users(tx: &mut Transaction) -> Result<Iterator<User>> {
    Ok(())
}

pub fn select_longest_email_length(tx: &mut Transaction) -> Result<Option<i64>> {
    Ok(())
}

// A useless main function, included only to make the example compile with
// Cargoâ€™s default settings for examples.
fn main() {
    let raw_connection = sqlite::open(":memory:").unwrap();
    let mut connection = Connection::new(&raw_connection);

    let tx = connection.begin().unwrap();
    tx.rollback().unwrap();

    let tx = connection.begin().unwrap();
    tx.commit().unwrap();
}


