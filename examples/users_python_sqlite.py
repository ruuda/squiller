# This file was generated by Squiller 0.5.0-dev (unspecified checkout).
# Input files:
# - examples/users.sql

from __future__ import annotations

import contextlib

from typing import Any, Iterator, NamedTuple, Optional

import sqlite3


class Transaction:
    def __init__(self, conn: sqlite3.Connection) -> None:
        self.conn = conn
        self.cursor = conn.cursor()
        self.cursor.execute("BEGIN DEFERRED")

    def commit(self) -> None:
        self.conn.commit()
        # Ensure we cannot reuse the connection.
        self.conn = None
        self.cursor = None

    def rollback(self) -> None:
        self.conn.rollback()
        self.conn = None
        self.cursor = None




def setup_schema(tx: Transaction) -> None:


def insert_user(tx: Transaction, name, email) -> Any:
    """
    Insert a new user and return its id.
    """


def insert_user_alt_return(tx: Transaction, name, email) -> Any:
    """
    TODO: Add global type detection, use a single "User" type everywhere.
    Insert a new user and return it.
    """


def insert_user_alt_arg(tx: Transaction, user: InsertUser) -> Any:
    """
    Insert a new user and return its id.
    """


def select_user_by_id(tx: Transaction, id) -> Any:
    """
    Select a particular user by id.
    
    We make a choice here to always expect one row, with "->1". If a user with
    the given id does not exist, the function will panic. Alternatively, we could
    write "->?", and then the return type would be wrapped in option in the
    generated code, allowing us to handle the error.
    """


def select_all_users(tx: Transaction) -> Iterator[Any]:
    """
    Iterate over all users ordered by id.
    """


def select_longest_email_length(tx: Transaction) -> Any:
    """
    Select the length of the longest email address.
    Note, `max` returns null when the table is empty, hence the `?` on the `i64`.
    """


def select_longest_email_length_alt(tx: Transaction) -> Optional[Any]:
    """
    Select the length of the longest email address.
    This query returns the same result as [`select_longest_email_length`], and
    will have the same type in the generated code, but it works differently under
    the hood: it returns zero or one rows with a non-null column, as opposed to
    returning exactly one row with a nullable column.
    """
